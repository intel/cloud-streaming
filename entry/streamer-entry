#!/bin/bash

SELF=$(basename $0)

function err() {
  echo "ERR $SELF $$ ${FUNCNAME[1]}: $@" >&2
}

function dbg() {
  echo "DBG $SELF $$ ${FUNCNAME[1]}: $@" >&2
}

function help() {
    cat <<EOF
Usage: $SELF [-i <id>] [-u <uid>]  [-h] <url>
  Streamer provide streaming service between AIC and WebRTC client

  -i <id>: instance ID, default: $id
  -u <uid>: user id, default: 0
  -l:      enable measuring latency
  -h:      print the usage message
  <ip>:    ip to signaling server in format

EOF
}

function main() {
  local uid=0
  local w=${K8S_ENV_DISPLAY_RESOLUTION_X:-1280}
  local h=${K8S_ENV_DISPLAY_RESOLUTION_Y:-720}
  local y=${ICR_ON:-n}
  local user_count=${K8S_ENV_USER_COUNT_PER_ANDROID:-1}
  local dev=${DEVICE:-/dev/dri/renderD128}
  local cqp=${K8S_ENV_FORCE_CQP:-false}
  local wdir="/opt/workdir"
  local k8s=${K8S_ENV:-"false"}
  local k8s_stateless=${K8S_ENV_STATELESS:-"false"}
  local dev=${DEVICE:-/dev/dri/renderD128}
  local id="$(id)"
  local measure_latency="false"
  local privileged_enable=${ENABLE_ENV_PRIVILEGED:-"false"}
  local codec=${CODEC:-"avc"}
  local icr_start_immediately=${ENV_ICR_START_IMMEDIATELY:-"false"}

  while getopts ":i:u:lh" opt; do
    case $opt in
    i) id=$OPTARG ;;
    u) uid=$OPTARG;;
    l) measure_latency="true";;
    h) help && exit 1 ;;
    *) echo "no such option: $opt" && exit 1 ;;
    esac
  done
  shift $((OPTIND - 1))

  if [[ -n "$1" ]]; then
    ip="$1"
  else
    err "signaling server ip is required"
    help
    exit 1
  fi

  dbg "id is $id"
  dbg "ips is $ips"
  dbg "port is $port"
  dbg "measure_latency is $measure_latency"

  local ips=$ip
  local peerid=$[$user_count*$id+$uid]
  local serverid=s$peerid
  local clientid=c$peerid
  local coturn_ip=${COTURN_IP:-"$ip"}
  local ice_port_begin=${ICE_PORT_BEGIN:-"50000"}
  local ice_port_end=${ICE_PORT_END:-"50999"}

  local ipc files
  if [[ "$k8s" == "true" ]]; then
    ipc="/conn"
    wdir="/conn"
    nid=0
    ips=${K8S_ENV_OWT_SERVER_IP:-owt}
    port=${K8S_ENV_OWT_SERVER_PORT:-8095}
    portOpt=" -p $port"
    k8sOpt="--k8s 1"
    local GPU_NODES=${GPU_NODES:-$(find /dev/dri -iname "renderD*" | wc -l)}
    local INS_ON_NODE="$(expr $id % $GPU_NODES + 128)"
    dev="/dev/dri/renderD$INS_ON_NODE"
    if [[ "$k8s_stateless" == "true" ]]; then
        wait_file /conn/stateless/id
        dev="/dev/dri/renderD128"
        IFS="," read -ra arr <<< "$(cat /conn/stateless/id)"
        serverid=${arr[0]}
        clientid=${arr[1]}
        echo wait for icr container start up...
        sleep 10
    fi
  else
    ipc="/opt/workdir/ipc"
    nid=$id
  fi
  if [[ $VIRTUAL_INPUT_NUM -gt 0 ]]; then
    for ((i=0;i<$VIRTUAL_INPUT_NUM; i++)); do
      if [[ "$k8s" == "true" ]]; then
        files="input-pipe-$i"
      elif [[ $user_count -gt 1 ]]; then
        files="input-pipe${id}-$uid-$i"
      else
        files="input-pipe${id}-$i"
      fi
    done
  fi
  for f in $files; do
    wait_file "${ipc}/${f}"
  done

  local opts="-s $ips  $portOpt $k8sOpt -d $dev --width $w --height $h -n $nid --server-peer-id $serverid --client-peer-id $clientid --workdir $wdir"

  if [[ $user_count -gt 1 ]]; then
      opts="$opts --enable-multi-user 1 --user $uid"
  fi

  if [ "$cqp" == "true" ]; then
      opts="$opts --video-rc cqp"
  fi

  if [ "$y" == "y" ]; then
      if [[ $user_count -gt 1 ]]; then
          iIP=`cat "/opt/workdir/icr/icr"$id-$uid`
      else
          iIP=`cat "/opt/workdir/icr/icr"$id`
      fi
      opts="$opts --icr-ip $iIP"
  fi

  if [[ "$k8s" == "true" ]]; then
      opts="$opts --icr-ip 127.0.0.1"
  fi

  if [ "$measure_latency" == "true" ]; then
      opts="$opts --measure-latency 1"
  fi

  if [[ "$codec" == "hevc" ]]; then
      echo "Use codec hevc"
      opts="$opts --codec h265"
  elif [[ "$codec" == "av1" ]]; then
      echo "Use codec av1"
      opts="$opts --codec av1"
  elif [[ "$codec" == "avc" ]]; then
      echo "Use codec avc"
  else
      echo "no codec selected, so use codec avc"
  fi

  if [[ "$icr_start_immediately" == "true" ]]; then
      opts="$opts --icr-start-immediately 1"
  fi

  if [ -n "$coturn_ip" ]; then
    opts="$opts --coturn-ip $coturn_ip"
  fi

  if [ $ice_port_begin -ge 1 ]; then
    opts="$opts --ice-port-min $ice_port_begin"
  fi

  if [ $ice_port_end -ge 1 ]; then
    opts="$opts --ice-port-max $ice_port_end"
  fi

  dbg "opts:$opts"
  if [[ "$privileged_enable" == "true" ]]; then
      dbg "mount /sys/kernel/debug"
      mount -t debugfs none /sys/kernel/debug
      chmod 0755 /sys/kernel/debug
      chmod 0222 /sys/kernel/debug/tracing/trace_marker
      chmod 0755 /sys/kernel/debug/tracing
  fi

  DISABLE_DYNAMIC_RESOLUTION=$DISABLE_DYNAMIC_RESOLUTION /opt/bin/ga-server-periodic $opts /opt/etc/ga/server.desktop.webrtc.conf
  echo "ga server exit, pls check log"
}

function wait_file() {
  dbg "wait for $1"
  while [[ ! -e "$1" ]]; do
    sleep 2
  done
  dbg "done"
}

function id() {
  dbg "start"
  local id="0"
  if [[ -n "$INSTANCE_ID" ]]; then
    id="$INSTANCE_ID"
  elif [[ "$k8s_stateless" == "true" ]]; then
    id="0"
  elif [[ -n "$MY_POD_NAME" ]]; then
    id=${MY_POD_NAME#"android-"}
  fi
  dbg "done: id:$id"
  echo "$id"
}

# here we go
main "$@"
